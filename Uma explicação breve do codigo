# Estrutura de Notebook para Treinamento de Modelo YOLO no Google Colab

Este documento descreve a estrutura organizada e o fluxo lógico para configurar, treinar e avaliar um modelo YOLO utilizando o framework Darknet no Google Colab.

## Estrutura do Notebook

### 1. Introdução e Configuração Inicial
- **Clonagem de Repositórios e Configuração do Darknet:**
  - Clone o repositório oficial do Darknet.
  - Ajuste o arquivo Makefile para habilitar GPU, CUDNN e OpenCV.
  - Compile o projeto utilizando o comando `make`.
- **Instalação de Dependências:**
  - Instale bibliotecas adicionais como `pycocotools`.

### 3. Download e Preparação dos Dados
- **Baixar datasets:**
  - Realize o download dos arquivos ZIP dos datasets (COCO ou outro).
- **Organização de diretórios:**
  - Crie pastas para armazenar os datasets (e.g., `train2014`, `val2014`).
- **Descompactação e verificação:**
  - Extraia os arquivos ZIP e certifique-se de que os dados foram organizados corretamente.

### 4. Configuração do Modelo
- **Preparar arquivos de configuração:**
  - Ajuste o arquivo `yolov3.cfg` ou equivalente para o número de classes e parâmetros específicos.
- **Configurar pesos pré-treinados:**
  - Baixe e salve os pesos pré-treinados (e.g., `yolov3.weights`).
- **Validar caminhos:**
  - Confirme que todos os arquivos estão nos diretórios corretos.

### 5. Treinamento do Modelo
- **Preparativos para o treinamento:**
  - Divida os dados entre treinamento e validação, se necessário.
  - Crie arquivos de anotações compatíveis com o YOLO (e.g., `train.txt`, `val.txt`).
- **Executar treinamento:**
  - Utilize o Darknet para iniciar o treinamento com os parâmetros configurados.
  - Monitore o progresso e salve pontos de verificação.

### 6. Avaliação e Testes
- **Avaliação do modelo:**
  - Teste o modelo treinado nos dados de validação.
- **Inferência em imagens ou vídeos:**
  - Gere e salve resultados com caixas delimitadoras para os objetos detectados.

## Resumo do Conteúdo Geral

**Objetivo Geral:**
Implementar um sistema de detecção de objetos utilizando o Darknet e o modelo YOLO no Google Colab, explorando recursos como armazenamento no Google Drive e aceleração por GPU.

**Resumo das Etapas:**
1. Configuração Inicial:
   - Importação de bibliotecas.
   - Montagem do Google Drive para acesso a arquivos.
   - Clonagem do repositório do Darknet.
2. Compilação do Darknet:
   - Instalação de dependências e verificação de suporte a CUDA.
   - Ajustes no Makefile para habilitar GPU, OpenCV e cuDNN.
3. Configuração do YOLO:
   - Download de pesos pré-treinados.
   - Configuração de arquivos (e.g., `.cfg`, `.names`, `.data`).
4. Treinamento e Testes:
   - Treinamento em dados personalizados.
   - Execução de testes e inferência.
5. Visualização de Resultados:
   - Plotagem dos resultados com bibliotecas como Matplotlib.
6. Exportação e Salvamento:
   - Armazenamento de resultados e pesos no Google Drive.

**Pontos Técnicos Importantes:**
- GPU utilizada para melhorar o desempenho.
- Comandos detalhados para configurar o Darknet no Colab.
- Visualização de imagens de entrada e saída diretamente no notebook.

**Fluxo de Comandos do Darknet:**
1. Clonagem do repositório:
   ```bash
   !git clone https://github.com/kriyeng/darknet/
   %cd darknet
   !git checkout feature/google-colab
   ```
2. Ajustes no Makefile:
   ```bash
   !sed -i 's/OPENCV=0/OPENCV=1/' Makefile
   !sed -i 's/GPU=0/GPU=1/' Makefile
   !sed -i 's/CUDNN=0/CUDNN=1/' Makefile
   ```
3. Compilação:
   ```bash
   !make -f ./Makefile
   ```
4. Execução de tarefas:
   - Detecção de objetos:
     ```bash
     !./darknet detect cfg/yolov3.cfg yolov3.weights data/person.jpg -dont-show
     ```
   - Treinamento:
     ```bash
     !./darknet detector train data/coco.data cfg/yolov3.cfg yolov3.weights -dont_show
     ```
   - Avaliação:
     ```bash
     !./darknet detector map data/coco.data cfg/yolov3.cfg backup/yolov3_final.weights
     ```

